#Docker Compose is a tool that helps you define and share multi-container applications. 
#With Compose, you can create a YAML file to define the services and with a single command, 
#you can spin everything up(launch)  or tear it (pull) all down.
#we register the version.
version: '3'
#services: represent the images we will use, we can then configure them to indicate whate we want to do when creating a container
services:
  nginx:
#context:we tell the docker where our Dockerfile is:
#Dockerfile: name
#build specifies the build configuration for creating container image from source
#build: here you'll be able to control many aspects of your image during build time, 
#from the name of the container to the variables and arguments passed to it.
    build:
      context: requirements/nginx/
      dockerfile: Dockerfile
#container_name is a string that specifies a custom container name, rather than a name generated by default.
    image: nginx
    container_name: nginx
#depends_on expresses startup and shutdown dependencies between services.
    depends_on:
      - wordpress
#ports: Exposes container ports 
    ports:
       - "443:443"
#volumes:define mount host path or named volumes that are accessible by service containers
    networks:
       - inception
    volumes:
       - ./requirements/nginx/conf/:/etc/nginx/http.d/
       - ./requirements/nginx/tools:/etc/nginx/ssl/
       - wp-volume:/var/www/
#restart: defines the policy that the plateform apllies on container termination
#always:always restart the container until its removal
#on-failure: restart the container if the exit code indicates an error
    restart: always
#   restart: on-failure
  mariadb:
    build:
      context: requirements/mariadb/
      dockerfile: Dockerfile
#args: allows you to pass arguments during build time
      args:
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
        DB_ROOT: ${DB_ROOT}
    image: mariadb
    container_name: mariadb
    ports:
      - "3306:3306"
    networks:
      - inception
    volumes:
      - db-volume:/var/lib/mysql
    restart: always
  wordpress:
    build:
      context: requirements/wordpress/
      dockerfile: Dockerfile
      args:
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
    image: wordpress
    container_name: wordpress
    depends_on:
      - mariadb
    networks:
      - inception
    volumes:
      - wp-volume:/var/www/
    restart: always
  redis:
    build:
      context: .
      dockerfile: requirements/bonus/redis/Dockerfile
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - inception
    restart: always
  vsftpd:
    build:
      context: .
      dockerfile: requirements/bonus/vsftpd/Dockerfile
      args:
        FTP_USR: ${FTP_USR}
        FTP_PWD: ${FTP_PWD}
    image: vsftpd
    container_name: vsftpd
    ports:
      - "21:21"
    volumes:
      - wp-volume:/var/www/
    networks:
     - inception
    restart: always
  adminer:
    build:
      context: .
      dockerfile: requirements/bonus/adminer/Dockerfile
    image: adminer
    container_name: adminer
    depends_on:
      - mariadb
    ports:
      - "8080:8080"
    networks:
     - inception
    restart: always
  website:
    build:
      context: .
      dockerfile: requirements/bonus/website/Dockerfile
    image: website
    container_name: website
    ports:
      - "80:80"
    networks:
      - inception
    restart: always
volumes:
  wp-volume:
    driver_opts:
      o: bind
      type: none # Les Bind Mounts sont des volumes qui se montent sur un chemin d'accès à l'hôte, et ils peuvent être modifiés par d'autres processus en dehors de docker.
      device: /home/${USER}/data/wordpress #Ou stocker le dossier sur votre ordinateur en local

  db-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/mariadb

networks:
    inception:
        driver: bridge
        name: inception
# bridge  indique a Docker d’installer automatiquement des règles qui permettront aux 3 containers de communiquer en bridge.
